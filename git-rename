#!/bin/sh

# This tool rewrite the commiter names and email addresses to new names.
#
# This feature can be used, to rewrite commits from git environments, where
# usernames or invalid values have been used. SVN usernames can be set to valid
# git values and it can even be used, if you email-address has been changed.
#
# NOTE: This tool uses git filter-branch and WILL REWRITE YOUR HISTORY! Make a
#   copy before using this tool! Colaborators have to clone your repository new!
#   If you don't like this behaviour, DON'T USE THIS TOOL!
#

#
# config
#
rename_mode="file"
rename_file=""
rename_complete="no"


#
# helper functions
#

# Save enty in configuration. New entry will be set via global variables:
#   rename_mode   mode for entry (name or email)
#   rename_search keyword to search for
#   rename_file   file to save configuration in
#   NEW_NAME      new name for entry
#   NEW_EMAIL     new email for entry
function save_entry () {
	case $rename_mode in
		n|name) rename_mode="n" ;;
		m|email) rename_mode="m" ;;

		*)
			echo "Unknown mode $rename_mode." >&2
			exit 1
		;;
	esac

	# Create new entry
	new_entry="$rename_mode:$rename_search:$NEW_NAME:$NEW_EMAIL"

	# If config is empty, simply store information into it.
	if [ ! -f "$rename_file" ]
	then
		echo "$new_entry" >> "$rename_file"
		return
	fi

	# Go through config. If same search entry is found, ask user to update entry
	# or to abort.
	conflicts="no"
	while read line
	do
		# get information of entry
		mode=$(echo "$line" | cut -d: -f1)
		search=$(echo "$line" | cut -d: -f2)

		if [ $rename_mode == $mode ] && [ $rename_search == $search ]
		then
			# we have a conflict entry
			conflicts="yes"

			# get rest of data
			n_name=$(echo "$line" | cut -d: -f3)
			n_mail=$(echo "$line" | cut -d: -f4)

			# If the new entry is a duplicate for an existing entry, ignore it
			# and abort writing new config file.
			if [ "$NEW_NAME" == "$n_name" ] && [ "$NEW_EMAIL" == "$n_mail" ]
			then
				[[ -f "$rename_file.new" ]] && rm "$rename_file.new"
				return
			fi

			# Ask user what to do now
			echo "found conflict in configuration:"
			echo "search:     $rename_search ($rename_mode)"
			echo "replace by (config):"
			echo "  name:     $n_name"
			echo "  email:    $n_mail"
			echo "replace by (new entry):"
			echo "  name:     $NEW_NAME"
			echo "  email:    $NEW_EMAIL"
			echo ""

			read -p "Overwrite configuration? [y/n] " overwrite_entry
			if [[ $overwrite_entry =~ ^[YyJj] ]]
			then
				echo "$new_entry" >> "$rename_file.new"
			else
				echo "$line" >> "$rename_file.new"
			fi
		else
			echo "$line" >> "$rename_file.new"
		fi
	done < "$rename_file"

	[[ "$conflicts" == "no" ]] && echo "$new_entry" >> "$rename_file.new"
	mv "$rename_file.new" "$rename_file"
}



#
# read command line options
#
rename_search=""
NEW_NAME=""
NEW_EMAIL=""
while getopts ":acf:pn:m:N:M:" opt; do
	# do some pre checks
	case $opt in
		f|n|m|N|M)
			if [ -z "$OPTARG" ]
			then
				echo "Argument of option -$OPTARG nmust not be empty!" >&2
				exit 1
			fi
		;;

		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
		;;

		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
		;;
	esac

	# set variables and mode
	case $opt in
		# set a different configuration file
		f) export rename_file="$OPTARG" ;;

		# print current configuration
		p) export rename_mode="print" ;;

		# switch to complete mode
		c) export rename_complete="yes" ;;

		# user only wants to append data to configuration
		a) export rename_complete="append" ;;

		# search for name
		n)
			export rename_mode="name"
			export rename_search="$OPTARG"
		;;

		# search for email
		m)
			export rename_mode="email"
			export rename_search="$OPTARG"
		;;

		N) export NEW_NAME="$OPTARG" ;;
		M) export NEW_EMAIL="$OPTARG" ;;
	esac
done

# shift for optional arguments for git filter-branch
shift $((OPTIND-1))



#
# Check configuration and get additional parameters
#

# If no file was set, set default file in git configuration directory
if [ -z "$rename_file" ]
then
	export rename_file=$(git rev-parse --show-toplevel)"/.git/rename_config"
fi

if [ "$rename_mode" == "name" -o "$rename_mode" == "email" ]
then
	# data for replacement must be set
	if [ -z "$NEW_NAME" ]
	then
		echo "Error: you have to set a new name!" >&2
		exit 1
	fi

	if [ -z "$NEW_EMAIL" ]
	then
		echo "Error: you have to set a new email!" >&2
		exit 1
	fi
fi


# Print config in print mode, if it is not empty and exit program after that. If
# config is empty, we will print nothing like other git commands.
if [ "$rename_mode" == "print" ]
then
	[ ! -f "$rename_file" ] && exit 0

	while read line
	do
		# get information of entry
		mode=$(echo "$line" | cut -d: -f1)
		search=$(echo "$line" | cut -d: -f2)
		name=$(echo "$line" | cut -d: -f3)
		mail=$(echo "$line" | cut -d: -f4)

		# translate mode to clear readable mode
		case $mode in
			n) mode="name" ;;
			m) mode="email" ;;

			*)
				echo "Unknown mode $mode." >&2
				exit 1
			;;
		esac

		echo "search:     $search ($mode)"
		echo "replace by:"
		echo "  name:     $name"
		echo "  email:    $mail"
		echo ""
	done < "$rename_file"

	exit 0
fi


# ask user to save data in config file in non-file mode and if he wants to
# switch to file mode after saving configuration.
if [ "$rename_mode" != "file" ]
then
	echo "search:     $rename_search ($rename_mode)"
	echo "replace by:"
	echo "  name:     $NEW_NAME"
	echo "  email:    $NEW_EMAIL"
	echo ""

	# If user wants to append data to configuration only, save config and exit.
	if [ "$rename_complete" = "append" ]
	then
		save_entry
		exit 0
	fi

	# Ask user, if he wants to store entry in configuration
	read -p "Save entry in your repository config? [y/n] " save_in_config
	if [[ $save_in_config =~ ^[YyJj] ]]
	then
		save_entry
	fi


	# If user wants to rename with the whole (new) config file, we switch mode
	# to file. If he does not want to, we will change the mode to file, too, but
	# a temporary config file will be created.
	if [ "$rename_complete" != "yes" ]
	then
		export rename_file=$(pwd)"/.rename_config"
		save_entry
		trap "rm '$rename_file'" EXIT
	fi
	export rename_mode="file"
fi


# Test, if rename_file exists. If it does not exists, we can now exit this tool.
if [ ! -f "$rename_file" ]
then
	echo "Rename configuration is empty." >&2
	exit 1
fi


# Execute git filter-branch to replace users and authors by new ones.
git filter-branch --env-filter '
	while read line
	do
		# get information of entry
		mode=$(echo "$line" | cut -d: -f1)
		search=$(echo "$line" | cut -d: -f2)
		name=$(echo "$line" | cut -d: -f3)
		email=$(echo "$line" | cut -d: -f4)

		# Which data should be compared?
		search_gc=""
		search_ga=""
		case $mode in
			n)
				search_gc="$GIT_COMMITTER_NAME"
				search_ga="$GIT_AUTHOR_NAME"
			;;

			m)
				search_gc="$GIT_COMMITTER_EMAIL"
				search_ga="$GIT_AUTHOR_EMAIL"
			;;

			*)
				echo "Unknown mode $mode." >&2
				exit 1
			;;
		esac

		# If there is a match in author or committer data (or both), replace the
		# data by new data.
		CHANGED=""
		if [ "$search_gc" == "$search" ]
		then
			export GIT_COMMITTER_NAME="$name"
			export GIT_COMMITTER_EMAIL="$email"

			CHANGED="committer"
		fi

		if [ "$search_ga" == "$search" ]
		then
			export GIT_AUTHOR_NAME="$name"
			export GIT_AUTHOR_EMAIL="$email"

			[ -n "$CHANGED" ] && CHANGED="both" || CHANGED="author"
		fi

		# print status
		if [ -n "$CHANGED" ]
		then
			# if author and committer were changed, print no keyword
			[ "$CHANGED" == "both" ] && CHANGED="" || CHANGED="$CHANGED "

			echo " $CHANGED$search -> $name ($email)"
		fi
	done < '"$rename_file"'
' $@
